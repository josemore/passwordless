{"version":3,"sources":["lib/helpers.js","App.js","serviceWorker.js","index.js","lib/creds.mgmt.js","lib/cbor.js"],"names":["__webpack_require__","d","__webpack_exports__","bufferToString","bufToHex","parseAuthData","require","buff","TextDecoder","decode","getEndian","arrayBuffer","ArrayBuffer","uint8Array","Uint8Array","uint16array","Uint16Array","readBE16","buffer","length","Error","reverse","readBE32","Uint32Array","Array","prototype","map","call","x","toString","slice","join","rpIdHash","flagsBuf","flagsInt","flags","up","uv","at","ed","counterBuf","counter","aaguid","undefined","credID","COSEPublicKey","credIDLenBuf","credIDLen","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","state","email","handleSubmit","bind","assertThisInitialized","handleInputChange","onRegister","onLogin","e","setState","target","value","preventDefault","console","log","alert","makeCredential","getAssertion","react_default","a","createElement","className","onSubmit","type","name","onChange","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","_helpers__WEBPACK_IMPORTED_MODULE_0__","_cbor__WEBPACK_IMPORTED_MODULE_1__","_cbor__WEBPACK_IMPORTED_MODULE_1___default","n","storeCredential","passwordcred","eval","credentials","store","getCredential","get","password","credential","Promise","res","rej","challenge","crypto","getRandomValues","userID","publicKey","rp","user","id","from","atob","c","charCodeAt","displayName","pubKeyCredParams","alg","create","newCredentialInfo","response","clientDataJSON","attestationObject","CBOR","authData","catch","error","credentialId","allowCredentials","getAssertionResponse","global","POW_2_24","POW_2_32","POW_2_53","obj","encode","lastLength","data","dataView","DataView","offset","prepareWrite","newByteLength","byteLength","requiredLength","oldDataView","uint32count","i","setUint32","getUint32","commitWrite","writeUint8","setUint8","writeUint8Array","writeTypeAndLength","setUint16","writeUint32","low","high","writeUint64","encodeItem","Math","floor","setFloat64","writeFloat64","utf8data","charCode","push","isArray","keys","key","ret","retView","getUint8","tagger","simpleValue","commitRead","readArrayBuffer","readUint8","readUint16","getUint16","readUint32","readBreak","readLength","additionalInformation","readIndefiniteStringLength","majorType","initialByte","appendUtf16Data","utf16data","decodeItem","tempArrayBuffer","tempDataView","sign","exponent","fraction","getFloat32","readFloat16","getFloat64","elements","fullArrayLength","fullArray","fullArrayOffset","set","String","fromCharCode","apply","retArray","retObject","module","exports"],"mappings":"iJAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAkBC,EAAQ,IAEnB,SAASH,EAAeI,GAE3B,OADU,IAAIC,aACHC,OAAOF,GAGtB,IAAIG,EAAY,WACZ,IAAIC,EAAc,IAAIC,YAAY,GAC9BC,EAAa,IAAIC,WAAWH,GAC5BI,EAAc,IAAIC,YAAYL,GAIlC,OAHAE,EAAW,GAAK,IAChBA,EAAW,GAAK,IAEM,QAAnBE,EAAY,GACJ,SAEA,OAGXE,EAAW,SAACC,GACZ,GAAqB,IAAlBA,EAAOC,OACN,MAAM,IAAIC,MAAM,8BAKpB,MAHmB,QAAhBV,MACCQ,EAASA,EAAOG,WAEb,IAAIL,YAAYE,EAAOA,QAAQ,IAGtCI,EAAW,SAACJ,GACZ,GAAqB,IAAlBA,EAAOC,OACN,MAAM,IAAIC,MAAM,+BAKpB,MAHmB,QAAhBV,MACCQ,EAASA,EAAOG,WAEb,IAAIE,YAAYL,EAAOA,QAAQ,IAGnC,SAASd,EAASc,GACrB,OAAOM,MAAMC,UAAUC,IAAIC,KAAK,IAAIb,WAAWI,GAAS,SAAAU,GAAC,OAAK,KAAOA,EAAEC,SAAS,KAAKC,OAAO,KAAIC,KAAK,IAIlG,SAAS1B,EAAca,GAC1B,IAAIc,EAAgBd,EAAOY,MAAM,EAAG,IAChCG,GADgDf,EAASA,EAAOY,MAAM,KAC/CA,MAAM,EAAG,GAAgBZ,EAASA,EAAOY,MAAM,GAC1E,IAAII,EAAgBD,EAAS,GACzBE,EAAQ,CACRC,MAAkB,EAAXF,GACPG,MAAkB,EAAXH,GACPI,MAAkB,GAAXJ,GACPK,MAAkB,IAAXL,GACPA,YAGAM,EAAgBtB,EAAOY,MAAM,EAAG,GAAgBZ,EAASA,EAAOY,MAAM,GAC1E,IAAIW,EAAgBnB,EAASkB,GAEzBE,OAAgBC,EAChBC,OAAgBD,EAChBE,OAAgBF,EAEpB,GAAGR,EAAMG,GAAI,CACTI,EAAmBxB,EAAOY,MAAM,EAAG,IACnC,IAAIgB,GAD6C5B,EAASA,EAAOY,MAAM,KAC7CA,MAAM,EAAG,GAAcZ,EAASA,EAAOY,MAAM,GACvE,IAAIiB,EAAe9B,EAAS6B,GAC5BF,EAAmB1B,EAAOY,MAAM,EAAGiB,GACnCF,EADiD3B,EAASA,EAAOY,MAAMiB,GAI3E,MAAO,CAACf,WAAUC,WAAUE,QAAOM,UAASD,aAAYE,SAAQE,SAAQC,wLCZ7DG,cAtDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAArB,KAAA0B,KAAMJ,KAOVO,MAAQ,CACJC,MAAO,IAPPP,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACpBA,EAAKW,kBAAoBX,EAAKW,kBAAkBF,KAAvBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACzBA,EAAKY,WAAaZ,EAAKY,WAAWH,KAAhBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAClBA,EAAKa,QAAUb,EAAKa,QAAQJ,KAAbR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KALAA,+HAgBDc,GACdX,KAAKY,SAAS,CAAER,MAAOO,EAAEE,OAAOC,6CAGvBH,GACTA,EAAEI,iBACFC,QAAQC,IAAI,6CAGLN,GACPO,MAAM,wCACNC,8CAGIR,GACJK,QAAQC,IAAI,SACZG,+CAIA,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,qCAEJF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAME,SAAUzB,KAAKK,cACjBgB,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,KAAK,QAAQC,SAAU5B,KAAKQ,oBAC/Ca,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASG,QAAS7B,KAAKS,YAApC,YACAY,EAAAC,EAAAC,cAAA,UAAQG,KAAK,SAASG,QAAS7B,KAAKU,SAApC,mBAhDNoB,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,wFEnInBnG,oBAAAC,EAAAC,oBAAA,sBAAAsE,iBAAAxE,oBAAAC,EAAAC,oBAAA,sBAAAuE,eAAA,IAAA2B,sCAAApG,oBAAA,GAAAqG,mCAAArG,oBAAA,GAAAsG,2CAAAtG,oBAAAuG,EAAAF,oCAIO,SAASG,kBACd,IAAIC,aAAeC,KAAI,iIAMvBZ,UAAUa,YAAYC,MAAMH,cAIvB,SAASI,gBACdf,UAAUa,YAAYG,IAAI,CAAEC,UAAY,IACrCd,KAAK,SAACe,GACL,IAAKA,EACH,MAAM,IAAI5F,MAAM,uBAClBiD,QAAQC,IAAI0C,KAMX,SAASxC,iBAAiB,IAAAtB,EAAAG,KAC/B,OAAO,IAAI4D,QAAQ,SAACC,EAAKC,GACvB,IAAIC,EAAY,IAAItG,WAAW,IAC/BuE,OAAOgC,OAAOC,gBAAgBF,GAE9B,IAAIG,EAASrE,EAAKM,MAAMC,MAGpB+D,EAAY,CACdJ,UAAaA,EAEbK,GAAM,CACJzC,KAAQ,gBAGV0C,KAAQ,CACNC,GAVK7G,WAAW8G,KAAKvC,OAAOwC,KAAKN,GAAS,SAAAO,GAAC,OAAIA,EAAEC,WAAW,KAW5D/C,KAAQ9B,EAAKM,MAAMC,MACnBuE,YAAe,YAGjBC,iBAAoB,CAClB,CAAElD,KAAQ,aAAcmD,KAAQ,GAChC,CAAEnD,KAAQ,aAAcmD,KAAQ,OAIpCpC,UAAUa,YAAYwB,OAAO,CAAEX,UAAaA,IACzCvB,KAAK,SAACmC,GACL/D,QAAQC,IAAI,UAAW8D,GACvB/D,QAAQC,IAAI,mBAAoBnE,gDAAeiI,EAAkBC,SAASC,iBAC1E,IAAIC,EAAoBC,6CAAK/H,OAAO2H,EAAkBC,SAASE,mBAC/DlE,QAAQC,IAAI,sBAAuBiE,GACnC,IAAIE,EAAWpI,gDAAckI,EAAkBE,UAC/CpE,QAAQC,IAAI,aAAcmE,GAC1BpE,QAAQC,IAAI,WAAYlE,gDAASqI,EAAS7F,SAC1CyB,QAAQC,IAAI,WAAYlE,gDAASqI,EAAS/F,SAC1C2B,QAAQC,IAAI,YAAakE,6CAAK/H,OAAOgI,EAAS5F,cAAc3B,SAE5DgG,EAAIuB,EAAS7F,UAGd8F,MAAM,SAACC,GACNtE,QAAQC,IAAI,OAAQqE,OAKrB,SAASlE,eAEdpB,KAAKmB,iBAAiByB,KAAK,SAAC2C,GAI1BvE,QAAQC,IAAR,iBACAD,QAAQC,IAAIsE,GAEZ,IAAIxB,EAAY,IAAItG,WAAW,IAC/BuE,OAAOgC,OAAOC,gBAAgBF,GAC9B,IAAII,EAAY,CACdJ,UAAWA,EACXyB,iBAAkB,CAChB,CAAE9D,KAAM,aAAc4C,GAAIiB,KAI9B9C,UAAUa,YAAYG,IAAI,CAAEU,UAAaA,IACtCvB,KAAK,SAAC6C,GACLvE,MAAM,6DACNF,QAAQC,IAAI,iCAAkCwE,KAE/CJ,MAAM,SAACC,GACNpE,MAAM,8BACNF,QAAQC,IAAI,OAAQqE,4BC3E5B,SAAWI,EAAQpG,GACjB,aACA,IAAIqG,EAAW,qBACbC,EAAW,WACXC,EAAW,iBAiXb,IAAIC,EAAM,CAAEC,OA/WZ,SAAgBjF,GACd,IAEIkF,EAFAC,EAAO,IAAI1I,YAAY,KACvB2I,EAAW,IAAIC,SAASF,GAExBG,EAAS,EAEb,SAASC,EAAavI,GAGpB,IAFA,IAAIwI,EAAgBL,EAAKM,WACrBC,EAAiBJ,EAAStI,EACvBwI,EAAgBE,GACrBF,IAAkB,EACpB,GAAIA,IAAkBL,EAAKM,WAAY,CACrC,IAAIE,EAAcP,EAClBD,EAAO,IAAI1I,YAAY+I,GACvBJ,EAAW,IAAIC,SAASF,GAExB,IADA,IAAIS,EAAeN,EAAS,GAAM,EACzBO,EAAI,EAAGA,EAAID,IAAeC,EACjCT,EAASU,UAAUD,GAAK,EAAGF,EAAYI,UAAUF,GAAK,IAI1D,OADAX,EAAalI,EACNoI,EAET,SAASY,IACPV,GAAUJ,EAKZ,SAASe,EAAWjG,GAClBgG,EAAYT,EAAa,GAAGW,SAASZ,EAAQtF,IAE/C,SAASmG,EAAgBnG,GAEvB,IADA,IAAIoF,EAAWG,EAAavF,EAAMhD,QACzB6I,EAAI,EAAGA,EAAI7F,EAAMhD,SAAU6I,EAClCT,EAASc,SAASZ,EAASO,EAAG7F,EAAM6F,IACtCG,IAgBF,SAASI,EAAmBxF,EAAM5D,GAdlC,IAAqBgD,EAefhD,EAAS,GACXiJ,EAAWrF,GAAQ,EAAI5D,GACdA,EAAS,KAClBiJ,EAAWrF,GAAQ,EAAI,IACvBqF,EAAWjJ,IACFA,EAAS,OAClBiJ,EAAWrF,GAAQ,EAAI,IArBNZ,EAsBLhD,EArBdgJ,EAAYT,EAAa,GAAGc,UAAUf,EAAQtF,KAsBnChD,EAAS,YAClBiJ,EAAWrF,GAAQ,EAAI,IArB3B,SAAqBZ,GACnBgG,EAAYT,EAAa,GAAGO,UAAUR,EAAQtF,IAqB5CsG,CAAYtJ,KAEZiJ,EAAWrF,GAAQ,EAAI,IArB3B,SAAqBZ,GACnB,IAAIuG,EAAMvG,EAAQ8E,EACd0B,GAAQxG,EAAQuG,GAAOzB,EACvBM,EAAWG,EAAa,GAC5BH,EAASU,UAAUR,EAAQkB,GAC3BpB,EAASU,UAAUR,EAAS,EAAGiB,GAC/BP,IAgBES,CAAYzJ,IAgFhB,GA5EA,SAAS0J,EAAW1G,GAClB,IAAI6F,EAEJ,IAAc,IAAV7F,EACF,OAAOiG,EAAW,KACpB,IAAc,IAAVjG,EACF,OAAOiG,EAAW,KACpB,GAAc,OAAVjG,EACF,OAAOiG,EAAW,KACpB,GAAIjG,IAAUxB,EACZ,OAAOyH,EAAW,KAEpB,cAAejG,GACb,IAAK,SACH,GAAI2G,KAAKC,MAAM5G,KAAWA,EAAO,CAC/B,GAAI,GAAKA,GAASA,GAAS+E,EACzB,OAAOqB,EAAmB,EAAGpG,GAC/B,IAAK+E,GAAY/E,GAASA,EAAQ,EAChC,OAAOoG,EAAmB,IAAKpG,EAAQ,IAG3C,OADAiG,EAAW,KAhEjB,SAAsBjG,GACpBgG,EAAYT,EAAa,GAAGsB,WAAWvB,EAAQtF,IAgEpC8G,CAAa9G,GAEtB,IAAK,SACH,IAAI+G,EAAW,GACf,IAAKlB,EAAI,EAAGA,EAAI7F,EAAMhD,SAAU6I,EAAG,CACjC,IAAImB,EAAWhH,EAAM4D,WAAWiC,GAC5BmB,EAAW,IACbD,EAASE,KAAKD,GACLA,EAAW,MACpBD,EAASE,KAAK,IAAOD,GAAY,GACjCD,EAASE,KAAK,IAAkB,GAAXD,IACZA,EAAW,OACpBD,EAASE,KAAK,IAAOD,GAAY,IACjCD,EAASE,KAAK,IAAQD,GAAY,EAAK,IACvCD,EAASE,KAAK,IAAkB,GAAXD,KAErBA,GAAuB,KAAXA,IAAqB,GACjCA,GAAoC,KAAxBhH,EAAM4D,aAAaiC,GAC/BmB,GAAY,MAEZD,EAASE,KAAK,IAAOD,GAAY,IACjCD,EAASE,KAAK,IAAQD,GAAY,GAAM,IACxCD,EAASE,KAAK,IAAQD,GAAY,EAAK,IACvCD,EAASE,KAAK,IAAkB,GAAXD,IAKzB,OADAZ,EAAmB,EAAGW,EAAS/J,QACxBmJ,EAAgBY,GAEzB,QACE,IAAI/J,EACJ,GAAIK,MAAM6J,QAAQlH,GAGhB,IADAoG,EAAmB,EADnBpJ,EAASgD,EAAMhD,QAEV6I,EAAI,EAAGA,EAAI7I,IAAU6I,EACxBa,EAAW1G,EAAM6F,SACd,GAAI7F,aAAiBrD,WAC1ByJ,EAAmB,EAAGpG,EAAMhD,QAC5BmJ,EAAgBnG,OACX,CACL,IAAImH,EAAOnI,OAAOmI,KAAKnH,GAGvB,IADAoG,EAAmB,EADnBpJ,EAASmK,EAAKnK,QAET6I,EAAI,EAAGA,EAAI7I,IAAU6I,EAAG,CAC3B,IAAIuB,EAAMD,EAAKtB,GACfa,EAAWU,GACXV,EAAW1G,EAAMoH,OAM3BV,CAAW1G,GAEP,UAAWmF,EACb,OAAOA,EAAKxH,MAAM,EAAG2H,GAIvB,IAFA,IAAI+B,EAAM,IAAI5K,YAAY6I,GACtBgC,EAAU,IAAIjC,SAASgC,GAClBxB,EAAI,EAAGA,EAAIP,IAAUO,EAC5ByB,EAAQpB,SAASL,EAAGT,EAASmC,SAAS1B,IACxC,OAAOwB,GAsNmB/K,OAnN5B,SAAgB6I,EAAMqC,EAAQC,GAC5B,IAAIrC,EAAW,IAAIC,SAASF,GACxBG,EAAS,EAOb,SAASoC,EAAW1K,EAAQgD,GAE1B,OADAsF,GAAUtI,EACHgD,EAET,SAAS2H,EAAgB3K,GACvB,OAAO0K,EAAW1K,EAAQ,IAAIL,WAAWwI,EAAMG,EAAQtI,IA2BzD,SAAS4K,IACP,OAAOF,EAAW,EAAGtC,EAASmC,SAASjC,IAEzC,SAASuC,IACP,OAAOH,EAAW,EAAGtC,EAAS0C,UAAUxC,IAE1C,SAASyC,IACP,OAAOL,EAAW,EAAGtC,EAASW,UAAUT,IAK1C,SAAS0C,IACP,OAAkC,MAA9B5C,EAASmC,SAASjC,KAEtBA,GAAU,GACH,GAET,SAAS2C,EAAWC,GAClB,GAAIA,EAAwB,GAC1B,OAAOA,EACT,GAA8B,KAA1BA,EACF,OAAON,IACT,GAA8B,KAA1BM,EACF,OAAOL,IACT,GAA8B,KAA1BK,EACF,OAAOH,IACT,GAA8B,KAA1BG,EACF,OAlBKH,IAAejD,EAAWiD,IAmBjC,GAA8B,KAA1BG,EACF,OAAQ,EACV,KAAM,0BAER,SAASC,EAA2BC,GAClC,IAAIC,EAAcT,IAClB,GAAoB,MAAhBS,EACF,OAAQ,EACV,IAAIrL,EAASiL,EAAyB,GAAdI,GACxB,GAAIrL,EAAS,GAAMqL,GAAe,IAAOD,EACvC,KAAM,oCACR,OAAOpL,EAGT,SAASsL,EAAgBC,EAAWvL,GAClC,IAAK,IAAI6I,EAAI,EAAGA,EAAI7I,IAAU6I,EAAG,CAC/B,IAAI7F,EAAQ4H,IACA,IAAR5H,IACEA,EAAQ,KACVA,GAAiB,GAARA,IAAiB,EACP,GAAd4H,IACL5K,GAAU,GACDgD,EAAQ,KACjBA,GAAiB,GAARA,IAAiB,IACP,GAAd4H,MAAuB,EACT,GAAdA,IACL5K,GAAU,IAEVgD,GAAiB,GAARA,IAAiB,IACP,GAAd4H,MAAuB,IACT,GAAdA,MAAuB,EACT,GAAdA,IACL5K,GAAU,IAIVgD,EAAQ,MACVuI,EAAUtB,KAAKjH,IAEfA,GAAS,MACTuI,EAAUtB,KAAK,MAAUjH,GAAS,IAClCuI,EAAUtB,KAAK,MAAkB,KAARjH,KA3GT,oBAAXwH,IACTA,EAAS,SAAUxH,GAAS,OAAOA,IACV,oBAAhByH,IACTA,EAAc,WAAc,OAAOjJ,IAsMrC,IAAI6I,EAzFJ,SAASmB,IACP,IAGI3C,EACA7I,EAJAqL,EAAcT,IACdQ,EAAYC,GAAe,EAC3BH,EAAsC,GAAdG,EAI5B,GAAkB,IAAdD,EACF,OAAQF,GACN,KAAK,GACH,OA9GR,WACE,IAAIO,EAAkB,IAAIhM,YAAY,GAClCiM,EAAe,IAAIrD,SAASoD,GAC5BzI,EAAQ6H,IAERc,EAAe,MAAR3I,EACP4I,EAAmB,MAAR5I,EACX6I,EAAmB,KAAR7I,EAEf,GAAiB,QAAb4I,EACFA,EAAW,YACR,GAAiB,IAAbA,EACPA,GAAa,YACV,GAAiB,IAAbC,EACP,OAAQF,GAAQ,EAAI,GAAKE,EAAWhE,EAGtC,OADA6D,EAAa5C,UAAU,EAAG6C,GAAQ,GAAKC,GAAY,GAAKC,GAAY,IAC7DH,EAAaI,WAAW,GA6FlBC,GACT,KAAK,GACH,OA5FCrB,EAAW,EAAGtC,EAAS0D,WAAWxD,IA6FrC,KAAK,GACH,OA3FCoC,EAAW,EAAGtC,EAAS4D,WAAW1D,IAgGzC,IADAtI,EAASiL,EAAWC,IACP,IAAME,EAAY,GAAK,EAAIA,GACtC,KAAM,iBAER,OAAQA,GACN,KAAK,EACH,OAAOpL,EACT,KAAK,EACH,OAAQ,EAAIA,EACd,KAAK,EACH,GAAIA,EAAS,EAAG,CAGd,IAFA,IAAIiM,EAAW,GACXC,EAAkB,GACdlM,EAASmL,EAA2BC,KAAe,GACzDc,GAAmBlM,EACnBiM,EAAShC,KAAKU,EAAgB3K,IAEhC,IAAImM,EAAY,IAAIxM,WAAWuM,GAC3BE,EAAkB,EACtB,IAAKvD,EAAI,EAAGA,EAAIoD,EAASjM,SAAU6I,EACjCsD,EAAUE,IAAIJ,EAASpD,GAAIuD,GAC3BA,GAAmBH,EAASpD,GAAG7I,OAEjC,OAAOmM,EAET,OAAOxB,EAAgB3K,GACzB,KAAK,EACH,IAAIuL,EAAY,GAChB,GAAIvL,EAAS,EACX,MAAQA,EAASmL,EAA2BC,KAAe,GACzDE,EAAgBC,EAAWvL,QAE7BsL,EAAgBC,EAAWvL,GAC7B,OAAOsM,OAAOC,aAAaC,MAAM,KAAMjB,GACzC,KAAK,EACH,IAAIkB,EACJ,GAAIzM,EAAS,EAEX,IADAyM,EAAW,IACHzB,KACNyB,EAASxC,KAAKuB,UAGhB,IADAiB,EAAW,IAAIpM,MAAML,GAChB6I,EAAI,EAAGA,EAAI7I,IAAU6I,EACxB4D,EAAS5D,GAAK2C,IAElB,OAAOiB,EACT,KAAK,EACH,IAAIC,EAAY,GAChB,IAAK7D,EAAI,EAAGA,EAAI7I,GAAUA,EAAS,IAAMgL,MAAenC,EAEtD6D,EADUlB,KACOA,IAEnB,OAAOkB,EACT,KAAK,EACH,OAAOlC,EAAOgB,IAAcxL,GAC9B,KAAK,EACH,OAAQA,GACN,KAAK,GACH,OAAO,EACT,KAAK,GACH,OAAO,EACT,KAAK,GACH,OAAO,KACT,KAAK,GACH,OAAOwB,EACT,QACE,OAAOiJ,EAAYzK,KAKnBwL,GACV,GAAIlD,IAAWH,EAAKM,WAClB,KAAM,kBACR,OAAO4B,IAOiCsC,EAAOC,QAC/CD,EAAOC,QAAU5E,EACTJ,EAAOP,OACfO,EAAOP,KAAOW,GA5XlB,CA8XG9F","file":"static/js/main.13d7f892.chunk.js","sourcesContent":["const base64url = require('base64url');\n\nexport function bufferToString(buff) {\n    var enc = new TextDecoder(); // always utf-8\n    return enc.decode(buff)\n}\n\nvar getEndian = () => {\n    let arrayBuffer = new ArrayBuffer(2);\n    let uint8Array = new Uint8Array(arrayBuffer);\n    let uint16array = new Uint16Array(arrayBuffer);\n    uint8Array[0] = 0xAA; // set first byte\n    uint8Array[1] = 0xBB; // set second byte\n\n    if(uint16array[0] === 0xBBAA)\n        return 'little';\n    else\n        return 'big';\n}\n\nvar readBE16 = (buffer) => {\n    if(buffer.length !== 2)\n        throw new Error('Only 2byte buffer allowed!');\n\n    if(getEndian() !== 'big')\n        buffer = buffer.reverse();\n\n    return new Uint16Array(buffer.buffer)[0]\n}\n\nvar readBE32 = (buffer) => {\n    if(buffer.length !== 4)\n        throw new Error('Only 4byte buffers allowed!');\n\n    if(getEndian() !== 'big')\n        buffer = buffer.reverse();\n\n    return new Uint32Array(buffer.buffer)[0]\n}\n\nexport function bufToHex(buffer) { // buffer is an ArrayBuffer\n    return Array.prototype.map.call(new Uint8Array(buffer), x => ('00' + x.toString(16)).slice(-2)).join('');\n}\n\n// https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\nexport function parseAuthData(buffer) {\n    let rpIdHash      = buffer.slice(0, 32);            buffer = buffer.slice(32);\n    let flagsBuf      = buffer.slice(0, 1);             buffer = buffer.slice(1);\n    let flagsInt      = flagsBuf[0];\n    let flags = {\n        up: !!(flagsInt & 0x01),\n        uv: !!(flagsInt & 0x04),\n        at: !!(flagsInt & 0x40),\n        ed: !!(flagsInt & 0x80),\n        flagsInt\n    }\n\n    let counterBuf    = buffer.slice(0, 4);             buffer = buffer.slice(4);\n    let counter       = readBE32(counterBuf);\n\n    let aaguid        = undefined;\n    let credID        = undefined;\n    let COSEPublicKey = undefined;\n\n    if(flags.at) {\n        aaguid           = buffer.slice(0, 16);          buffer = buffer.slice(16);\n        let credIDLenBuf = buffer.slice(0, 2);           buffer = buffer.slice(2);\n        let credIDLen    = readBE16(credIDLenBuf);\n        credID           = buffer.slice(0, credIDLen);   buffer = buffer.slice(credIDLen);\n        COSEPublicKey    = buffer;\n    }\n\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\n}\n\nexport function generateRandomBuffer(length) {\n    if(!length)\n        length = 32;\n\n    var randomBuff = new Uint8Array(length);\n    window.crypto.getRandomValues(randomBuff);\n    return randomBuff\n}\n\nexport function publicKeyCredentialToJSON(pubKeyCred) {\n    if(pubKeyCred instanceof Array) {\n        let arr = [];\n        for(let i of pubKeyCred)\n            arr.push(publicKeyCredentialToJSON(i));\n\n        return arr\n    }\n\n    if(pubKeyCred instanceof ArrayBuffer) {\n        return base64url.encode(pubKeyCred)\n    }\n\n    if(pubKeyCred instanceof Object) {\n        let obj = {};\n\n        for (let key in pubKeyCred) {\n            obj[key] = publicKeyCredentialToJSON(pubKeyCred[key])\n        }\n\n        return obj\n    }\n\n    return pubKeyCred\n}\n\nexport function preformatMakeCredReq(makeCredReq) {\n    makeCredReq.challenge = base64url.decode(makeCredReq.challenge);\n    makeCredReq.user.id   = base64url.decode(makeCredReq.user.id);\n\n    return makeCredReq\n}\n\nexport function preformatGetAssertReq(getAssert) {\n    getAssert.challenge = base64url.decode(getAssert.challenge);\n    \n    for(let allowCred of getAssert.allowCredentials) {\n        allowCred.id = base64url.decode(allowCred.id);\n    }\n\n    return getAssert\n}\n ","import React, { Component } from 'react';\nimport './App.css';\nimport { makeCredential, storeCredential, getAssertion, getCredential } from './lib/creds.mgmt';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleInputChange = this.handleInputChange.bind(this)\n        this.onRegister = this.onRegister.bind(this)\n        this.onLogin = this.onLogin.bind(this)\n    }\n\n    state = {\n        email: \"\"\n    }\n\n    componentWillMount() {\n\n    }\n\n    handleInputChange(e) {\n        this.setState({ email: e.target.value });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        console.log(\"Submit\");\n    }\n\n    onRegister(e) {\n        alert(\"Registration completed. Please login\");\n        makeCredential()\n    }\n\n    onLogin(e) {\n        console.log(\"Login\")\n        getAssertion()\n    }\n\n    render() {\n        return (\n            <div className=\"App\" >\n                <header className=\"App-header\">\n                    <p>Password-less Auth Demo</p>\n                </header>\n                <div>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>Email:</label>\n                        <input type=\"text\" name=\"email\" onChange={this.handleInputChange} />\n                        <button type=\"submit\" onClick={this.onRegister}>Register</button>\n                        <button type=\"button\" onClick={this.onLogin}>Login</button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { bufferToString, parseAuthData, bufToHex } from './helpers';\nimport CBOR from './cbor'\n\n// Offer user to store username and password for this site\nexport function storeCredential() {\n  var passwordcred = eval(`new PasswordCredential({\n      'type': 'password',\n      'id': 'alice',\n      'password': 'VeryRandomPassword123456'\n  })`)\n\n  navigator.credentials.store(passwordcred)\n}\n\n// Get credentials for this site (will list all if more than one)\nexport function getCredential() {\n  navigator.credentials.get({ 'password': true })\n    .then((credential) => {\n      if (!credential)\n        throw new Error('No credential found')\n      console.log(credential);\n      // sendServer(credential) // PasswordCredential {iconURL: \"\", name: \"\", password: \"VeryRandomPassword123456\", id: \"alice\", type: \"password\"}\n    })\n}\n\n// Request credential from the authentication (register) \nexport function makeCredential() {\n  return new Promise((res, rej) => {\n    var challenge = new Uint8Array(32);\n    window.crypto.getRandomValues(challenge);\n\n    var userID = this.state.email;\n    var id = Uint8Array.from(window.atob(userID), c => c.charCodeAt(0))\n\n    var publicKey = {\n      'challenge': challenge,\n\n      'rp': {\n        'name': 'Example Inc.'\n      },\n\n      'user': {\n        'id': id,\n        'name': this.state.email,\n        'displayName': 'John Doe'\n      },\n\n      'pubKeyCredParams': [\n        { 'type': 'public-key', 'alg': -7 },\n        { 'type': 'public-key', 'alg': -257 }\n      ]\n    }\n\n    navigator.credentials.create({ 'publicKey': publicKey })\n      .then((newCredentialInfo) => {\n        console.log('SUCCESS', newCredentialInfo)\n        console.log('ClientDataJSON: ', bufferToString(newCredentialInfo.response.clientDataJSON))\n        let attestationObject = CBOR.decode(newCredentialInfo.response.attestationObject);\n        console.log('AttestationObject: ', attestationObject)\n        let authData = parseAuthData(attestationObject.authData);\n        console.log('AuthData: ', authData);\n        console.log('CredID: ', bufToHex(authData.credID));\n        console.log('AAGUID: ', bufToHex(authData.aaguid));\n        console.log('PublicKey', CBOR.decode(authData.COSEPublicKey.buffer));\n\n        res(authData.credID)\n        //localStorage.setItem('CredID', base64url.encode(authData.credID));\n      })\n      .catch((error) => {\n        console.log('FAIL', error)\n      })\n  })\n}\n\nexport function getAssertion() {\n\n  this.makeCredential().then((credentialId) => {\n\n    //let credentialId = new Uint8Array(base64url.decode(localStorage.getItem('CredID')))\n\n    console.log(`CREDENTIAL ID`)\n    console.log(credentialId)\n\n    var challenge = new Uint8Array(32);\n    window.crypto.getRandomValues(challenge);\n    var publicKey = {\n      challenge: challenge,\n      allowCredentials: [\n        { type: \"public-key\", id: credentialId }\n      ]\n    }\n\n    navigator.credentials.get({ 'publicKey': publicKey })\n      .then((getAssertionResponse) => {\n        alert('SUCCESSFULLY GOT AN ASSERTION! Open your browser console!')\n        console.log('SUCCESSFULLY GOT AN ASSERTION!', getAssertionResponse)\n      })\n      .catch((error) => {\n        alert('Open your browser console!')\n        console.log('FAIL', error)\n\n      })\n\n  })\n}","/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n(function (global, undefined) {\n  \"use strict\";\n  var POW_2_24 = 5.960464477539063e-8,\n    POW_2_32 = 4294967296,\n    POW_2_53 = 9007199254740992;\n\n  function encode(value) {\n    var data = new ArrayBuffer(256);\n    var dataView = new DataView(data);\n    var lastLength;\n    var offset = 0;\n\n    function prepareWrite(length) {\n      var newByteLength = data.byteLength;\n      var requiredLength = offset + length;\n      while (newByteLength < requiredLength)\n        newByteLength <<= 1;\n      if (newByteLength !== data.byteLength) {\n        var oldDataView = dataView;\n        data = new ArrayBuffer(newByteLength);\n        dataView = new DataView(data);\n        var uint32count = (offset + 3) >> 2;\n        for (var i = 0; i < uint32count; ++i)\n          dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\n      }\n\n      lastLength = length;\n      return dataView;\n    }\n    function commitWrite() {\n      offset += lastLength;\n    }\n    function writeFloat64(value) {\n      commitWrite(prepareWrite(8).setFloat64(offset, value));\n    }\n    function writeUint8(value) {\n      commitWrite(prepareWrite(1).setUint8(offset, value));\n    }\n    function writeUint8Array(value) {\n      var dataView = prepareWrite(value.length);\n      for (var i = 0; i < value.length; ++i)\n        dataView.setUint8(offset + i, value[i]);\n      commitWrite();\n    }\n    function writeUint16(value) {\n      commitWrite(prepareWrite(2).setUint16(offset, value));\n    }\n    function writeUint32(value) {\n      commitWrite(prepareWrite(4).setUint32(offset, value));\n    }\n    function writeUint64(value) {\n      var low = value % POW_2_32;\n      var high = (value - low) / POW_2_32;\n      var dataView = prepareWrite(8);\n      dataView.setUint32(offset, high);\n      dataView.setUint32(offset + 4, low);\n      commitWrite();\n    }\n    function writeTypeAndLength(type, length) {\n      if (length < 24) {\n        writeUint8(type << 5 | length);\n      } else if (length < 0x100) {\n        writeUint8(type << 5 | 24);\n        writeUint8(length);\n      } else if (length < 0x10000) {\n        writeUint8(type << 5 | 25);\n        writeUint16(length);\n      } else if (length < 0x100000000) {\n        writeUint8(type << 5 | 26);\n        writeUint32(length);\n      } else {\n        writeUint8(type << 5 | 27);\n        writeUint64(length);\n      }\n    }\n\n    function encodeItem(value) {\n      var i;\n\n      if (value === false)\n        return writeUint8(0xf4);\n      if (value === true)\n        return writeUint8(0xf5);\n      if (value === null)\n        return writeUint8(0xf6);\n      if (value === undefined)\n        return writeUint8(0xf7);\n\n      switch (typeof value) {\n        case \"number\":\n          if (Math.floor(value) === value) {\n            if (0 <= value && value <= POW_2_53)\n              return writeTypeAndLength(0, value);\n            if (-POW_2_53 <= value && value < 0)\n              return writeTypeAndLength(1, -(value + 1));\n          }\n          writeUint8(0xfb);\n          return writeFloat64(value);\n\n        case \"string\":\n          var utf8data = [];\n          for (i = 0; i < value.length; ++i) {\n            var charCode = value.charCodeAt(i);\n            if (charCode < 0x80) {\n              utf8data.push(charCode);\n            } else if (charCode < 0x800) {\n              utf8data.push(0xc0 | charCode >> 6);\n              utf8data.push(0x80 | charCode & 0x3f);\n            } else if (charCode < 0xd800) {\n              utf8data.push(0xe0 | charCode >> 12);\n              utf8data.push(0x80 | (charCode >> 6) & 0x3f);\n              utf8data.push(0x80 | charCode & 0x3f);\n            } else {\n              charCode = (charCode & 0x3ff) << 10;\n              charCode |= value.charCodeAt(++i) & 0x3ff;\n              charCode += 0x10000;\n\n              utf8data.push(0xf0 | charCode >> 18);\n              utf8data.push(0x80 | (charCode >> 12) & 0x3f);\n              utf8data.push(0x80 | (charCode >> 6) & 0x3f);\n              utf8data.push(0x80 | charCode & 0x3f);\n            }\n          }\n\n          writeTypeAndLength(3, utf8data.length);\n          return writeUint8Array(utf8data);\n\n        default:\n          var length;\n          if (Array.isArray(value)) {\n            length = value.length;\n            writeTypeAndLength(4, length);\n            for (i = 0; i < length; ++i)\n              encodeItem(value[i]);\n          } else if (value instanceof Uint8Array) {\n            writeTypeAndLength(2, value.length);\n            writeUint8Array(value);\n          } else {\n            var keys = Object.keys(value);\n            length = keys.length;\n            writeTypeAndLength(5, length);\n            for (i = 0; i < length; ++i) {\n              var key = keys[i];\n              encodeItem(key);\n              encodeItem(value[key]);\n            }\n          }\n      }\n    }\n\n    encodeItem(value);\n\n    if (\"slice\" in data)\n      return data.slice(0, offset);\n\n    var ret = new ArrayBuffer(offset);\n    var retView = new DataView(ret);\n    for (var i = 0; i < offset; ++i)\n      retView.setUint8(i, dataView.getUint8(i));\n    return ret;\n  }\n\n  function decode(data, tagger, simpleValue) {\n    var dataView = new DataView(data);\n    var offset = 0;\n\n    if (typeof tagger !== \"function\")\n      tagger = function (value) { return value; };\n    if (typeof simpleValue !== \"function\")\n      simpleValue = function () { return undefined; };\n\n    function commitRead(length, value) {\n      offset += length;\n      return value;\n    }\n    function readArrayBuffer(length) {\n      return commitRead(length, new Uint8Array(data, offset, length));\n    }\n    function readFloat16() {\n      var tempArrayBuffer = new ArrayBuffer(4);\n      var tempDataView = new DataView(tempArrayBuffer);\n      var value = readUint16();\n\n      var sign = value & 0x8000;\n      var exponent = value & 0x7c00;\n      var fraction = value & 0x03ff;\n\n      if (exponent === 0x7c00)\n        exponent = 0xff << 10;\n      else if (exponent !== 0)\n        exponent += (127 - 15) << 10;\n      else if (fraction !== 0)\n        return (sign ? -1 : 1) * fraction * POW_2_24;\n\n      tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);\n      return tempDataView.getFloat32(0);\n    }\n    function readFloat32() {\n      return commitRead(4, dataView.getFloat32(offset));\n    }\n    function readFloat64() {\n      return commitRead(8, dataView.getFloat64(offset));\n    }\n    function readUint8() {\n      return commitRead(1, dataView.getUint8(offset));\n    }\n    function readUint16() {\n      return commitRead(2, dataView.getUint16(offset));\n    }\n    function readUint32() {\n      return commitRead(4, dataView.getUint32(offset));\n    }\n    function readUint64() {\n      return readUint32() * POW_2_32 + readUint32();\n    }\n    function readBreak() {\n      if (dataView.getUint8(offset) !== 0xff)\n        return false;\n      offset += 1;\n      return true;\n    }\n    function readLength(additionalInformation) {\n      if (additionalInformation < 24)\n        return additionalInformation;\n      if (additionalInformation === 24)\n        return readUint8();\n      if (additionalInformation === 25)\n        return readUint16();\n      if (additionalInformation === 26)\n        return readUint32();\n      if (additionalInformation === 27)\n        return readUint64();\n      if (additionalInformation === 31)\n        return -1;\n      throw \"Invalid length encoding\";\n    }\n    function readIndefiniteStringLength(majorType) {\n      var initialByte = readUint8();\n      if (initialByte === 0xff)\n        return -1;\n      var length = readLength(initialByte & 0x1f);\n      if (length < 0 || (initialByte >> 5) !== majorType)\n        throw \"Invalid indefinite length element\";\n      return length;\n    }\n\n    function appendUtf16Data(utf16data, length) {\n      for (var i = 0; i < length; ++i) {\n        var value = readUint8();\n        if (value & 0x80) {\n          if (value < 0xe0) {\n            value = (value & 0x1f) << 6\n              | (readUint8() & 0x3f);\n            length -= 1;\n          } else if (value < 0xf0) {\n            value = (value & 0x0f) << 12\n              | (readUint8() & 0x3f) << 6\n              | (readUint8() & 0x3f);\n            length -= 2;\n          } else {\n            value = (value & 0x0f) << 18\n              | (readUint8() & 0x3f) << 12\n              | (readUint8() & 0x3f) << 6\n              | (readUint8() & 0x3f);\n            length -= 3;\n          }\n        }\n\n        if (value < 0x10000) {\n          utf16data.push(value);\n        } else {\n          value -= 0x10000;\n          utf16data.push(0xd800 | (value >> 10));\n          utf16data.push(0xdc00 | (value & 0x3ff));\n        }\n      }\n    }\n\n    function decodeItem() {\n      var initialByte = readUint8();\n      var majorType = initialByte >> 5;\n      var additionalInformation = initialByte & 0x1f;\n      var i;\n      var length;\n\n      if (majorType === 7) {\n        switch (additionalInformation) {\n          case 25:\n            return readFloat16();\n          case 26:\n            return readFloat32();\n          case 27:\n            return readFloat64();\n        }\n      }\n\n      length = readLength(additionalInformation);\n      if (length < 0 && (majorType < 2 || 6 < majorType))\n        throw \"Invalid length\";\n\n      switch (majorType) {\n        case 0:\n          return length;\n        case 1:\n          return -1 - length;\n        case 2:\n          if (length < 0) {\n            var elements = [];\n            var fullArrayLength = 0;\n            while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n              fullArrayLength += length;\n              elements.push(readArrayBuffer(length));\n            }\n            var fullArray = new Uint8Array(fullArrayLength);\n            var fullArrayOffset = 0;\n            for (i = 0; i < elements.length; ++i) {\n              fullArray.set(elements[i], fullArrayOffset);\n              fullArrayOffset += elements[i].length;\n            }\n            return fullArray;\n          }\n          return readArrayBuffer(length);\n        case 3:\n          var utf16data = [];\n          if (length < 0) {\n            while ((length = readIndefiniteStringLength(majorType)) >= 0)\n              appendUtf16Data(utf16data, length);\n          } else\n            appendUtf16Data(utf16data, length);\n          return String.fromCharCode.apply(null, utf16data);\n        case 4:\n          var retArray;\n          if (length < 0) {\n            retArray = [];\n            while (!readBreak())\n              retArray.push(decodeItem());\n          } else {\n            retArray = new Array(length);\n            for (i = 0; i < length; ++i)\n              retArray[i] = decodeItem();\n          }\n          return retArray;\n        case 5:\n          var retObject = {};\n          for (i = 0; i < length || length < 0 && !readBreak(); ++i) {\n            var key = decodeItem();\n            retObject[key] = decodeItem();\n          }\n          return retObject;\n        case 6:\n          return tagger(decodeItem(), length);\n        case 7:\n          switch (length) {\n            case 20:\n              return false;\n            case 21:\n              return true;\n            case 22:\n              return null;\n            case 23:\n              return undefined;\n            default:\n              return simpleValue(length);\n          }\n      }\n    }\n\n    var ret = decodeItem();\n    if (offset !== data.byteLength)\n      throw \"Remaining bytes\";\n    return ret;\n  }\n\n  var obj = { encode: encode, decode: decode };\n  let define;\n  if (typeof define === \"function\" && define.amd)\n    define(\"cbor/cbor\", obj);\n  else if (typeof module !== \"undefined\" && module.exports)\n    module.exports = obj;\n  else if (!global.CBOR)\n    global.CBOR = obj;\n\n})(this);"],"sourceRoot":""}